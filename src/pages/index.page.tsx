import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { ProductCart, ProductSearchList } from 'src/features/Product'
import { Container, LayoutDefault, Pagination } from 'src/components'
import { getAlgoliaClient } from 'src/libs'
import { Product } from 'src/graphql'

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const algoliaClient = getAlgoliaClient({
    index: 'dev_store',
  })

  const querySearch = (query?.search as string) || ''
  const queryPagination = query?.page ? parseInt(query.page as string) - 1 : 0

  const {
    hits,
    nbHits,
    nbPages,
    page: currentPage,
  } = await algoliaClient.search(querySearch, {
    page: queryPagination,
  })

  return {
    props: {
      loading: false,
      products: {
        total: nbHits,
        data: hits,
      },
      pages: {
        total: nbPages,
        current: currentPage,
      },
    },
  }
}

export type TPageHomeProps = {
  loading?: boolean
  products: {
    total: number
    data: Array<Product>
  }
  pages: {
    total: number
    current: number
  }
}

const HomePage: NextPage<TPageHomeProps> = ({ loading, products, pages }) => {
  const renderProductList = () => {
    if (products.total === 0)
      return (
        <Container>
          <p>Ops! No results found.</p>
        </Container>
      )

    return (
      <>
        <Container>
          <ProductSearchList total={products.total} products={products.data} />
        </Container>

        <Container>
          <Pagination total={pages.total} current={pages.current} />
        </Container>
      </>
    )
  }

  if (loading)
    return (
      <Container>
        <p>Loading...</p>
      </Container>
    )

  return (
    <>
      <Head>
        <title>Store | The best of New York</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <LayoutDefault>{renderProductList()}</LayoutDefault>

      <ProductCart />
    </>
  )
}

export default HomePage
